# -*- coding: utf-8 -*-
"""classical_music_recommendation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zTgXkwpuzgK__mUn4C1hMndMWEp6HzpR
"""

import pandas as pd
import requests
from bs4 import BeautifulSoup
import urllib
import io
import csv
from ast import literal_eval
import random
from collections import Counter
import matplotlib.pyplot as plt

# Define check function with variable-length arguments
def check(*variables):
    """ Check all elements from numbers"""
    print("="*30)
    for var in variables:
        print(f"Value: {var}")
        print(f"Type: {type(var)}")
        print("="*30)

"""# Files

## read files
"""

from google.colab import drive
drive.mount('/content/drive')

"""path"""

# path
IMdb_file = '/content/drive/MyDrive/python_project/IMdb_movie.csv'
movie_file = '/content/drive/MyDrive/python_project/movie.csv'
composition_file = '/content/drive/MyDrive/python_project/composition.csv'
mov_mus_file = '/content/drive/MyDrive/python_project/movie_to_music.csv'
mus_mov_file = '/content/drive/MyDrive/python_project/music_to_movie.csv'

"""movie
> movie_frame

> all_mov3

> all_mov4
"""

with open(movie_file, 'r') as f:
    movie_frame = pd.read_csv(f)

with open(movie_file, 'r') as f:
    info = csv.reader(f)
    all_mov3 = list(info)

all_mov3.pop(0)

# genre
all_mov4 = all_mov3.copy()
for i in all_mov4:
    l_genre = i[4].split(',')
    i[4] = l_genre
    i_year = int(i[3])
    i[3] = i_year
len(all_mov4)

"""composition:
> composition frame

> all_comp2
"""

with open(composition_file, 'r') as f:
    composition_frame = pd.read_csv(f)

composition_frame

with open(composition_file, 'r') as f:
    info = csv.reader(f)
    all_comp2 = list(info)

all_comp2.pop(0)

"""view by movie
> movie_to_music


format:
*   key = naxos movie title 'title + (article) + (year)'
*   value = [COMPOSER + music title + (catalogue num), ...]


"""

# movie_to_music dictionary
with open(mov_mus_file) as f:
    reader = csv.reader(f)
    movieD = dict(reader)

movie_to_music = dict()
for i in movieD.keys():
    movie_to_music[i] = literal_eval(movieD[i])

movie_to_music['Knives Out (2019)']

"""view by composition
> music_to_movie

format:



*   key = 'COMPOSER + music title + (catalogue num)'
*   value = [COMPOSER + music title + (catalogue num), ...]




"""

# music_to_movie dictionary
with open(mus_mov_file) as f2:
    reader = csv.reader(f2)
    musicD = dict(reader)

music_to_movie = dict()
for i in musicD.keys():
    music_to_movie[i] = literal_eval(musicD[i])

music_to_movie['SHOSTAKOVICH Jazz Suite No. 2 (Suite for Stage Variety Orchestra): VI. Waltz 2 (8.555949)']

# clean
for i in music_to_movie:
    if type(music_to_movie[i]) == 'str':
        if '))' in music_to_movie[i]:
            music_to_movie[i] = music_to_movie[i][:(len(music_to_movie[i]) - 1)]
    else:
        for j in range(len(music_to_movie[i])):
            if '))' in music_to_movie[i][j]:
                # print(music_to_movie[i][j])
                clean_mov = music_to_movie[i][j][:(len(music_to_movie[i][j]) - 1)]
                music_to_movie[i].pop(j)
                music_to_movie[i].append(clean_mov)

music_to_movie['SHOSTAKOVICH Jazz Suite No. 2 (Suite for Stage Variety Orchestra): VI. Waltz 2 (8.555949)']

len(music_to_movie)

# basic analysis
list_ct = []
for i in movie_to_music.values():
    list_ct.extend(i)
mmCounter = Counter(list_ct)

"""# search and recommend"""

from google.colab import data_table

data_table.enable_dataframe_formatter()

def searching2(user, d1, d2):
    try:
        v_list = d1[user]
        for i in v_list:
            if i in d2:
                print('=' * 100)
                print(f'result: {i}')
                if type(d2[i]) == list:
                    try:
                        d2[i].remove(user)
                    except:
                        pass
                    if d2[i] != []:
                        outframe = pd.DataFrame({'might also be interested in ...': d2[i]})
                        display(outframe)
                else:
                    print('\n'+ 'might also be interested in ...' + '\n')
                    print(d2[i])
    except:
        print('try again.')

def searching3(user, d1, d2):
    try:
        v_list = d1[user]
        list_out = []
        for i in v_list:
            if i in d2:
                if type(d2[i]) == list:
                    try:
                        d2[i].remove(user)
                    except:
                        pass
                    if d2[i] != []:
                        if len(d2[i]) == 1:
                            pass
                        else:
                            for m in d2[i]:
                                try:
                                    for q in d1[m]:
                                        if q != i and q not in list_out:
                                            list_out.append(q)
                                except:
                                    pass
        resultframe = pd.DataFrame({'result' : d1[user]})
        outframe = pd.DataFrame({'might also be interested in ...': list_out})
        display(resultframe, outframe)
    except:
        print('try again.')

# 如果需要完整的完整的 format
movieKeys = [* [i for i in movie_to_music.keys()]]
movieKeys

searching2('Power of One (The) (1992)', movie_to_music, music_to_movie)

#@title 搜尋和推薦
電影名稱 = 'Moscow on the Hudson (1984)' #@param movieKeys {allow-input: true}

searching3(電影名稱, movie_to_music, music_to_movie)

# 如果需要完整的完整的 format
musicKeys = [* [i for i in music_to_movie.keys()]]

musicKeys[:750]
# print(* [i for i in music_to_movie.keys()], sep='\n')

#@title 搜尋和推薦
# 'DEBUSSY Preludes, Book 1: No. 8 La fille aux cheveux de lin (8.553293)'
music_title = "DEBUSSY Preludes, Book 1: No. 8 La fille aux cheveux de lin (8.553293)" #@param ["DEBUSSY Preludes, Book 1: No. 8 La fille aux cheveux de lin (8.553293)", "ADAM Giselle: Apparition de Giselle (8.550755-56)", "ADAM Giselle: Entree d'Hilarion, scene et fugue des Wilis (8.550755-56)", "ADAM Giselle: Pas de deux des jeunes paysans (8.550755-56)", "ADAMS China Gates (8.559285)", "ADAMS Christian Zeal and Activity (Nonesuch 075597914467)", "ADAMS Hallelujah Junction (8.559285)", "ADAMS Harmonium: No. 3. Wild Nights (Nonesuch 603497121168)"]
searching2(music_title, music_to_movie, movie_to_music)

"""# Search by genre

> movie_to_genre

> music_to_genres
"""

movie_to_genre = dict()
for i in all_mov4:
    movie_to_genre[i[0]] = i[4]

# len(movie_to_genre) = 1183

music_to_genres = dict()
num0 = 0
for i in music_to_movie:
    l_mov = music_to_movie[i]
    if type(l_mov) == 'str':
        try:
            music_to_genres[i] = movie_to_genre[l_mov]
        except:
            pass
            music_to_genres[i] = []
    else:
        l_gen = []
        for j in l_mov:
            try:
                l_gen.append(movie_to_genre[j])
            except:
                pass
        music_to_genres[i] = l_gen

genre_list2 = []
for i in music_to_genres:
    l = [k for m in music_to_genres[i] for k in m]
    genre_list2.append([i, l])

# len(genre_list2) = 1545

"""## search"""

l_genre = []
for i in all_mov4:
    for l in i[4]:
        if l not in l_genre:
            l_genre.append(l)
# len(l_genre) = 25

def recommend_music(genre_input, user_prefer):
    recom_list = []
    for i in genre_list2:
        if genre_input in i[1]:
            recom_list.append([i[1].count(genre_input), i[0]])
    if user_prefer == 'Classic':
        recom_list2 = sorted(recom_list, reverse=True)
        if len(recom_list2) > 10:
            rec_frame = pd.DataFrame({'recommend': [recom_list2[i][1] for i in range(10)]})
            display(rec_frame)
        else:
            rec_frame = pd.DataFrame({'recommend': [recom_list2[i][1] for i in range(len(recom_list2))]})
            display(rec_frame)
    elif user_prefer == 'Smart':
        recom_list2 = sorted(recom_list)
        if len(recom_list2) > 10:
            rec_frame = pd.DataFrame({'recommend': [recom_list2[i][1] for i in range(10)]})
            display(rec_frame)
        else:
            rec_frame = pd.DataFrame({'recommend': [recom_list2[i][1] for i in range(len(recom_list2))]})
            display(rec_frame)
    else:
        if len(recom_list) > 10:
            recom_list3 = random.choices(recom_list, k=10)
            rec_frame = pd.DataFrame({'recommend': [recom_list3[i][1] for i in range(10)]})
            display(rec_frame)
        else:
            recom_list3 = random.choices(recom_list, k=len(recom_list))
            rec_frame = pd.DataFrame({'recommend': [recom_list3[i][1] for i in range(len(recom_list3))]})
            display(rec_frame)

MovieGenre = 'Sci-Fi' #@param ['Crime', 'Mystery', 'Thriller', 'Fantasy', 'Horror', 'Drama', 'Romance', 'Comedy', 'Adventure', 'Family', 'Animation', 'War', 'Film-Noir', 'Music', 'Musical', 'Biography', 'Western', 'History', 'Action', 'Sport', 'Sci-Fi', 'Documentary', 'Adult', 'News']
yourPreference = 'Random' #@param ['Classic', 'Smart', 'Random']
recommend_music(MovieGenre, yourPreference)
